# Esse arquivo contém a lista das instruções MIPS.
#
# A subcrate `minips-macros` consome essa lista e gera *automaticamente*
# a implementação do decoder das instruções.
#
# O rationale desse método é que é menos repetitivo desse jeito. Anteriormente,
# eu precisaria implementar cada nova instrução em uns 4 lugares. Usando isso, eu
# descrevo ela aqui e só preciso implementar a nova variante do enum no cpu.rs.
#
# Também, foi uma desculpa para eu finalmente aprender a usar procedural macros. Ah,
# e também uma justificativa minha para eu procrastinar outras disciplinas :p
#
# Campos:
# - opcode: o valor de `opcode` da instrução. Para as R, é 0 por default.
# - funct: o valor de `funct` da instrução.
# - fmt: como a instrução deve ser printada no disassembly. A sintaxe
#   apresentada nesse campo será exatamente o que será colocado dentro 
#   da chamada à macro format!, a menos de parênteses e do parâmetro do
#   formatter. Opcional.
# - sign_ext: `true` se o valor imediato deve ser interpretado como um signed. Opcional
#   e defaulta para `true`.

# Instrucoes R
r:
    # Core Instruction Set
    add: 
        funct: 0x20
    addu: 
        funct: 0x21
    and:
        funct: 0x24
    jr:
        funct: 0x08
    nor:
        funct: 0x27
    or: 
        funct: 0x25
    slt:
        funct: 0x2a
    sltu:
        funct: 0x2b
    sll:
        funct: 0x00
    srl:
        funct: 0x02
    sub:
        funct: 0x22
    subu:
        funct: 0x23

    # Arithmetic Core Instruction Set
    div: 
        funct: 0x1A
    divu:
        funct: 0x1B
    mfhi:
        funct: 0x10
    mflo:
        funct: 0x12
    mfc0:
        opcode: 0x10
        funct: 0x00
    mult:
        funct: 0x18
    multu:
        funct: 0x19
    sra:
        funct: 0x03

    syscall:
        funct: 0x0c
        has_args: false

# Instrucoes I
i:
    addi:
        opcode: 0x08
    addiu:
        opcode: 0x09
    andi:
        opcode: 0x0C
        sign_ext: false
    beq:
        opcode: 0x04
    bne:
        opcode: 0x05
    lbu:
        opcode: 0x24
    lhu:
        opcode: 0x25
    ll:
        opcode: 0x30
    lui:
        opcode: 0x0F
    lw:
        opcode: 0x23
    ori:
        opcode: 0x0D
        sign_ext: false
    slti:
        opcode: 0x0A
    sltiu:
        opcode: 0x0B
    sb:
        opcode: 0x28
    sc:
        opcode: 0x38
    sh:
        opcode: 0x29
    sw:
        opcode: 0x2B

    # Arithmetic Core Instruction Set
    lwc1:
        opcode: 0x31
    ldc1:
        opcode: 0x35
    swc1:
        opcode: 0x39
    sdc1:
        opcode: 0x3D

# Instrucoes J
j:
    j:
        opcode: 0x02
    jal:
        opcode: 0x03
